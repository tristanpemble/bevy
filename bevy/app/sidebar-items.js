window.SIDEBAR_ITEMS = {"derive":[["AppLabel","Generates an impl of the `AppLabel` trait."],["DynamicPlugin","Generates a dynamic plugin entry point function for the given `Plugin` type."]],"enum":[["RunMode","Determines the method used to run an [`App`]’s `Schedule`."]],"mod":[["prelude",""]],"struct":[["App","A container of app logic and data."],["AppExit","An event that indicates the [`App`] should exit. This will fully exit the app process at the start of the next tick of the schedule."],["AppLabelId","A strongly-typed identifier for an [`AppLabel`]."],["AppTypeRegistry","The [`Resource`] that stores the [`App`]’s `TypeRegistry`."],["First","Runs first in the schedule. This is run by the [`Main`] schedule."],["FixedUpdate","The schedule that contains systems which only run after a fixed period of time has elapsed."],["Last","Runs last in the schedule. This is run by the [`Main`] schedule."],["Main","The schedule that contains the app logic that is evaluated each tick of [`App::update()`]."],["MainScheduleOrder","Defines the schedules to be run for the [`Main`] schedule, including their order."],["MainSchedulePlugin","Initializes the [`Main`] schedule, sub schedules,  and resources for a given [`App`]."],["PluginGroupBuilder","Facilitates the creation and configuration of a [`PluginGroup`]. Provides a build ordering to ensure that [`Plugin`]s which produce/require a `Resource` are built before/after dependent/depending [`Plugin`]s. [`Plugin`]s inside the group can be disabled, enabled or reordered."],["PostStartup","The schedule that runs once after [`Startup`]. This is run by the [`Main`] schedule."],["PostUpdate","The schedule that contains logic that must run after [`Update`]. For example, synchronizing “local transforms” in a hierarchy to “global” absolute transforms. This enables the [`PostUpdate`] transform-sync system to react to “local transform” changes in [`Update`] without the [`Update`] systems needing to know about (or add scheduler dependencies for) the “global transform sync system”."],["PreStartup","The schedule that runs before [`Startup`]. This is run by the [`Main`] schedule."],["PreUpdate","The schedule that contains logic that must run before [`Update`]. For example, a system that reads raw keyboard input OS events into an `Events` resource. This enables systems in [`Update`] to consume the events from the `Events` resource without actually knowing about (or taking a direct scheduler dependency on) the “os-level keyboard event sytsem”."],["RunFixedUpdateLoop","Runs the [`FixedUpdate`] schedule in a loop according until all relevant elapsed time has been “consumed”. This is run by the [`Main`] schedule."],["ScheduleRunnerPlugin","Configures an [`App`] to run its `Schedule` according to a given [`RunMode`]."],["ScheduleRunnerSettings","The configuration information for the [`ScheduleRunnerPlugin`]."],["Startup","The schedule that runs once when the app starts. This is run by the [`Main`] schedule."],["StateTransition","Runs state transitions. This is run by the [`Main`] schedule."],["SubApp","A [`SubApp`] contains its own [`Schedule`] and [`World`] separate from the main [`App`]. This is useful for situations where data and data processing should be kept completely separate from the main application. The primary use of this feature in bevy is to enable pipelined rendering."],["Update","The schedule that contains app logic. This is run by the [`Main`] schedule."]],"trait":[["AppLabel","A strongly-typed class of labels used to identify an [`App`]."],["Plugin","A collection of Bevy app logic and configuration."],["PluginGroup","Combines multiple [`Plugin`]s into a single unit."]],"type":[["CreatePlugin","A type representing an unsafe function that returns a mutable pointer to a [`Plugin`]. It is used for dynamically loading plugins."]]};
window.SIDEBAR_ITEMS = {"derive":[["DynamicPlugin","Generates a dynamic plugin entry point function for the given `Plugin` type."]],"struct":[["App","A container of app logic and data."],["AppTypeRegistry","The [`Resource`] that stores the [`App`]’s `TypeRegistry`."],["First","Runs first in the schedule. This is run by the [`Main`] schedule."],["FixedUpdate","The schedule that contains systems which only run after a fixed period of time has elapsed."],["Last","Runs last in the schedule. This is run by the [`Main`] schedule."],["Main","The schedule that contains the app logic that is evaluated each tick of [`App::update()`]."],["PostStartup","The schedule that runs once after [`Startup`]. This is run by the [`Main`] schedule."],["PostUpdate","The schedule that contains logic that must run after [`Update`]. For example, synchronizing “local transforms” in a hierarchy to “global” absolute transforms. This enables the [`PostUpdate`] transform-sync system to react to “local transform” changes in [`Update`] without the [`Update`] systems needing to know about (or add scheduler dependencies for) the “global transform sync system”."],["PreStartup","The schedule that runs before [`Startup`]. This is run by the [`Main`] schedule."],["PreUpdate","The schedule that contains logic that must run before [`Update`]. For example, a system that reads raw keyboard input OS events into an `Events` resource. This enables systems in [`Update`] to consume the events from the `Events` resource without actually knowing about (or taking a direct scheduler dependency on) the “os-level keyboard event sytsem”."],["Startup","The schedule that runs once when the app starts. This is run by the [`Main`] schedule."],["StateTransition","Runs state transitions. This is run by the [`Main`] schedule."],["Update","The schedule that contains app logic. This is run by the [`Main`] schedule."]],"trait":[["Plugin","A collection of Bevy app logic and configuration."],["PluginGroup","Combines multiple [`Plugin`]s into a single unit."]]};